
static bool parse_basic_control_register (uint16_t reg16b_val, FILE *out_file_prt, uint8_t reg_addr) {
    bool res = false;
    if (reg16b_val & RESET_BIT_15) {
        fprintf (out_file_prt, "\n  reg %02u bit15: RW PHY reset", reg_addr);
    } else {
        fprintf (out_file_prt, "\n  reg %02u bit15: RW normal operation", reg_addr);
    }
    if (reg16b_val & LOOPBACK_BIT_14) {
        fprintf (out_file_prt, "\n  reg %02u bit14: RW PHY reset", reg_addr);
    } else {
        fprintf (out_file_prt, "\n  reg %02u bit14: RW normal operation", reg_addr);
    }

    if (reg16b_val & SPEED_SELECT_13) {
        fprintf (out_file_prt, "\n  reg %02u bit13: RW 100 Mbit/s if SPEED_SELECT (MSB) = 0 reserved if SPEED_SELECT (MSB) = 1", reg_addr);
    } else {
        fprintf (out_file_prt,
                 "\n  reg %02u bit 13: RW 10 Mbit/s if SPEED_SELECT (MSB) = 0 1000 Mbit/s if SPEED_SELECT (MSB) = 1", reg_addr);
    }

    if (reg16b_val & AUTONEG_EN_12) {
        fprintf (out_file_prt, "\n  reg %02u bit12: RW Error", reg_addr);
    } else {
        fprintf (out_file_prt, "\n  reg %02u bit12: RW Auto negotiation not supported; always 0; a write access is ignored ", reg_addr);
    }

    if (reg16b_val & POWER_DOWN_11) {
        fprintf (out_file_prt, "\n  reg %02u bit11: RW power down and switch to Standby mode (provided ISOLATE = 0; ignored if "
                             "ISOLATE = 1 and CONTROL_ERR interrupt generated) ", reg_addr);
    } else {
        fprintf (out_file_prt,
                 "\n  reg %02u bit 11:RW  normal operation (clearing this bit automatically triggers a transition to Normal "
                 "mode, provided control bits POWER_MODE are set to 0011 Normal mode, see Table 18) ", reg_addr);
    }

    if (reg16b_val & ISOLATE_10) {
        fprintf (out_file_prt, "\n  reg %02u bit10: RW isolate PHY from MII/RMII (provided POWER_DOWN = 0; ignored if POWER_DOWN "
                             "= 1 and CONTROL_ERR interrupt generated) ", reg_addr);
    } else {
        fprintf (out_file_prt, "\n  reg %02u bit10: RW normal operation ", reg_addr);
    }

    if (reg16b_val & RE_AUTONEG_9) {
        fprintf (out_file_prt, "\n  reg %02u bit9: RW Error ", reg_addr);
    } else {
        fprintf (out_file_prt, "\n  reg %02u bit9:  RW Auto negotiation not supported; always 0; a write access is ignored.", reg_addr);
    }

    if (reg16b_val & DUPLEX_MODE_8) {
        fprintf (out_file_prt, "\n  reg %02u bit8: RW  Full-duplex ", reg_addr);
    } else {
        fprintf (out_file_prt, "\n  reg %02u bit8: RW  Half-duplex ", reg_addr);
    }

    if (reg16b_val & COLLISION_BIT_7) {
        fprintf (out_file_prt, "\n  reg %02u bit7: RW  Test Enable COL test ", reg_addr);
    } else {
        fprintf (out_file_prt, "\n  reg %02u bit7: RW  Test Disable COL test ", reg_addr);
    }

    if (reg16b_val & SPEED_SELECT_6) {
        fprintf (out_file_prt, "\n  reg %02u bit6: RW 1000 Mbit/s if SPEED_SELECT (LSB) = 0 reserved if SPEED_SELECT (LSB) = 1", reg_addr);
    } else {
        fprintf (out_file_prt, "\n  reg %02u bit6: RW 10 Mbit/s if SPEED_SELECT (LSB) = 0 100 Mbit/s if SPEED_SELECT (LSB) = 1 ", reg_addr);
    }
    if (reg16b_val & UNIDIRECT_EN_5) {
        fprintf (out_file_prt, "\n  reg %02u bit5: RW enable transmit from MII regardless of whether the PHY has determined that "
                             "a valid link has been established", reg_addr);
    } else {
        fprintf (out_file_prt, "\n  reg %02u bit5: RW enable transmit from MII only when the PHY has determined that a valid "
                             "link has been established ", reg_addr);
    }
    fprintf (out_file_prt, "\n");
    return res;
}